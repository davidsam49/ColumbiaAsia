
trigger:
- master

resources:
  repositories:
    - repository: self

variables:
  buildplatform: 'anycpu'
  buildconfiguration: 'debug'
  imageRepository: 'mcare21-application'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.Buildnumber)'
  containerregistry: 'Mcare21ContainerRegistry-serviceconnection'
  UTproject: '$(System.DefaultWorkingDirectory)'

stages:
- stage: SonarCloud
  displayName: CodeCoverage
  pool:
    vmImage: windows-latest
    
  jobs:
    - job: UnitTest
      displayName: test
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'MCare21_sonarcloud'
          organization: 'casoftwaredevelopment-mcare21'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'CASoftwareDevelopment_MCare21_Application'
          cliProjectName: 'MCare21_Application'
          cliSources: '.'
          extraProperties: sonar.exclusions=test/**/*,wwwroot/**/*,custom_typings/**/*, node_modules/**/*
    
     
      # - task: NodeTool@0
      #   inputs:
      #     versionSpec: '16.14'
      #   displayName: 'Install Node.js'

      # - script: |
      #     npm install -g @angular/cli
      #     npm install
      #     ng build 
      #     # ng test
      #     displayName: 'npm install and build' 
      
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          command: install 


      - task: Npm@1
        displayName: 'Build Angular'
        inputs:
          command: 'custom'
          customCommand: 'run build'

      - task: Npm@1
        displayName: 'Test Angular'
        inputs:
          command: 'custom'
          customCommand: 'test --watch=false --code-coverage'
          
      - task: Npm@1
        displayName: 'Lint angular app'
        inputs:
          command: 'custom'
          customCommand: 'run lint'
          

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage Angular results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(Build.SourcesDirectory)/coverage/'
#           failIfCoverageEmpty: true       

#       # - task: Npm@1
#       #   inputs:
#       #     command: 'custom'
#       #     workingDir: '$(System.DefaultWorkingDirectory)'
#       #     customCommand: 'test --watch=false --code-coverage'
            
    
#       # - task: PublishTestResults@2
#       #   inputs:
#       #     testResultsFormat: 'JUnit'
#       #     testResultsFiles: '**/TEST-*.xml'
 
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build
    pool:
      name : 'CA_Self_hosted'
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(containerregistry)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(build.Repository.localpath)'
        tags: '$(tag)'
      
       
   
    - task: CopyFiles@2
      inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/Manifest'
          Contents: '**/*.yml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'yaml'
        publishLocation: 'Container'
    - task: PublishCodeCoverageResults@1
      inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/*.xml'
# - stage: 'deploy'
#   displayName: 'deploy to dev'
#   dependsOn: 'build'
#   jobs:
#       - job: 'deploy'
#         displayName: 'deploy to aks'
#         pool:
#          vmImage: 'ubuntu-latest'
#         steps:
#         - task: DownloadPipelineArtifact@2
#           inputs:
#             buildType: 'current'
#             artifactName: 'yaml'
#             itemPattern: '**/*.yml'
#             targetPath: '$(System.ArtifactsDirectory)'

#         - task: KubernetesManifest@0
#           inputs:
#             action: 'deploy'
#             kubernetesServiceConnection: '$(kubernetesServiceConnection)'
#             namespace: 'default'
#             manifests: '$(System.ArtifactsDirectory)/deployment.yml'
#             containers: 'mcaretestacr.azurecr.io/$(imageRepository):$(tag)'